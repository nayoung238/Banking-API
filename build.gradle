plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'SN'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	google()
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.12'
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	// web
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.session:spring-session-core'

	// aop
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// message queue
	implementation 'org.springframework.kafka:spring-kafka'

	// open feign
	implementation 'org.jsoup:jsoup:1.18.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.3'

	// data
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
	runtimeOnly 'com.h2database:h2'

	// fcm
	implementation 'com.google.firebase:firebase-messaging:23.2.0'
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.awaitility:awaitility:4.2.2'


	// monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-core'
	implementation 'io.micrometer:micrometer-registry-prometheus'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jacocoTestReport {
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(false)
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, include: [
							'**/application/**',
							'**/api/**',
							'**/service/**',
							'**/entity/**'
					], exclude: [
							'**/dto/**',
							'**/common/**',
							'**/security/**',
							'**/validation/**'
					])
				})
		)
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
